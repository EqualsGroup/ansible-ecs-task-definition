---
  # tasks file for ecs-task-definition
  - name: Verify required variables
    fail:
      msg: "Required variable not set"
    when:
      - services is not defined
      - env is not defined
      - docker_tag is not defined
  
  - name: Assume deployer role
    sts_assume_role:
      role_arn: "{{ assume_role_arn }}"
      role_session_name: "deploy"
      duration_seconds: "{{ role_duration }}"
    register: assumed_role
    changed_when: false
  
  - name: Get AWS account facts
    aws_caller_facts:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
    register: aws_account_meta
  
  - name: Set AWS account Facts
    set_fact:
      aws_account_id: "{{ aws_account_meta.account }}"
  
  - set_fact:
      secrets_original: "{{ secrets }}"
    when: 
      - secrets is defined
      - friendly_secrets == true
  
  - name: Populate Secret ARNs
    set_fact:
      secrets:  "{{ (secrets|default({}))|combine({item.key: (lookup('pipe', 'AWS_ACCESS_KEY_ID=' + assumed_role.sts_creds.access_key +' AWS_SECRET_ACCESS_KEY=' + assumed_role.sts_creds.secret_key + ' AWS_SESSION_TOKEN=' + assumed_role.sts_creds.session_token + ' aws secretsmanager describe-secret --secret-id ' + item.value) | from_json).get('ARN') })}}"
    loop: "{{ secrets | default({}) | dict2items }}"
    when: 
      - secrets is defined
      - friendly_secrets == true
    no_log: true
  
  - name: Decoded secret ARNs
    debug: 
      msg: "{{ secrets }}"
    when: 
      - secrets is defined
      - friendly_secrets == true
      
  # - name: Verify Docker image
  
  - name: Load task definition
    set_fact:
      task_definitions: "{{ (task_definitions|default([])) | combine( { service: lookup('template', task_definition_path)} ) }}"
    loop: "{{ services }}"
    loop_control:
      loop_var: service
  
  - set_fact:
      secrets: "{{ secrets_original }}"
    when: 
      - secrets_original is defined
      - friendly_secrets == true

  - name: Generate task definition files
    copy:
      dest: "/tmp/task_definition_{{ task_definition.key }}.json"
      content: "{{ task_definition.value | to_json }}"
    loop: "{{ task_definitions | dict2items }}"
    loop_control:
      loop_var: task_definition
      index_var: task_definition_index
    register: generated_task_definitions
    no_log: true

  - debug:
      msg: "{{ generated_task_definitions }}"

  - name: Publish task definition
    shell: "aws ecs register-task-definition --cli-input-json file://{{ task_definition_file.dest }} --output=text --query 'taskDefinition.taskDefinitionArn'"
    environment:
      AWS_ACCESS_KEY_ID: "{{ assumed_role.sts_creds.access_key }}"
      AWS_SECRET_ACCESS_KEY: "{{ assumed_role.sts_creds.secret_key }}"
      AWS_SESSION_TOKEN: "{{ assumed_role.sts_creds.session_token }}"
    loop: "{{ generated_task_definitions.results }}"
    loop_control:
      loop_var: task_definition_file
    register: task_registration
    # no_log: true
  
  - debug:
      msg: "{{ item.task_definition_file.task_definition.value.family }} Published task definition arn: {{ item.stdout }} "
    loop: "{{ task_registration.results }}"
  
  - name: "Creating task definition artefact: {{ artefact_path }}/task-definition-arn-{{ item.task_definition_file.task_definition.value.family }}.txt"
    copy:
      dest: "{{ artefact_path }}/task-definition-arn-{{ item.task_definition_file.task_definition.value.family }}.txt"
      content: "{{ item.stdout }}"
    loop: "{{ task_registration.results }}"
    no_log: true
  