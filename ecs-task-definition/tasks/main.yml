---
  # tasks file for ecs-task-definition
- name: Verify required variables
  fail:
    msg: "Required variable not set"
  when:
    - services is not defined
    - env is not defined
    - docker_tag is not defined
  
- name: Assuming deployer role
  sts_assume_role:
    role_arn: "{{ assume_role_arn }}"
    role_session_name: "deploy"
    duration_seconds: "{{ role_duration }}"
  register: assumed_role
  changed_when: false
  when: 
    - assume_role_arn is defined
    - assume_role_arn != ""
    - assume_role_arn != false

- name: "assume_role_arn is false, using existing AWS credentials"
  set_fact:
    assumed_role: false
  when:
    - not assume_role_arn

- set_fact:
    aws_access_key_id: "{{ assumed_role.sts_creds.access_key | default('') }}"
    aws_secret_acess_key: "{{ assumed_role.sts_creds.secret_key | default('') }}"
    aws_session_token: "{{ assumed_role.sts_creds.session_token | default('') }}"

- name: Get AWS account facts (assumed role)
  aws_caller_info:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_acess_key }}"
    security_token: "{{ aws_session_token }}"
  register: aws_account_meta_assumed_role
  when: 
    - assumed_role is defined
    - assumed_role != ""
    - assumed_role != false

- name: Get AWS account facts
  shell: aws sts get-caller-identity
  register: aws_account_meta
  when: 
    - not assumed_role 

- name: Set AWS account facts (assumed role)
  set_fact:
    aws_account_id: "{{ aws_account_meta_assumed_role.account | default('') }}"
  when:
    - assumed_role is defined
    - assumed_role != ""
    - assumed_role != false

- name: Set AWS account facts
  set_fact:
    aws_account_id: "{{ (aws_account_meta.stdout | from_json).get('Account') | default('') }}"
  when:
    - not assumed_role
  
- set_fact:
    secrets_original: "{{ secrets }}"
  when: 
    - secrets is defined
    - friendly_secrets == true
  
- name: Populate Secret ARNs
  set_fact:
    secrets:  "{{ (secrets|default({}))|combine({item.key: (lookup('pipe', 'AWS_ACCESS_KEY_ID=' + aws_access_key_id +' AWS_SECRET_ACCESS_KEY=' + aws_secret_acess_key + ' AWS_SESSION_TOKEN=' + aws_session_token + ' aws secretsmanager describe-secret --secret-id ' + item.value) | from_json).get('ARN') })}}"
  loop: "{{ secrets | default({}) | dict2items }}"
  when: 
    - secrets is defined
    - friendly_secrets == true
    - assumed_role is defined
    - assumed_role != ""
    - assumed_role != false
  no_log: "{{ ! debug }}"

- name: Populate Secret ARNs
  set_fact:
    secrets:  "{{ (secrets|default({}))|combine({item.key: (lookup('pipe', 'aws secretsmanager describe-secret --secret-id ' + item.value) | from_json).get('ARN') })}}"
  loop: "{{ secrets | default({}) | dict2items }}"
  when: 
    - secrets is defined
    - friendly_secrets == true
    - not assumed_role
    
# - name: Verify Docker image

- name: Generate task definition secrets block
  set_fact:
    secrets_generated:  "{{ (secrets_generated|default([]))|union([{'name': item.key, 'valueFrom': item.value }])}}"
  loop: "{{ secrets | dict2items }}"
  when: 
    - secrets is defined

- set_fact:
    task_definitions: {}

- name: Load task definition
  set_fact:
    task_definitions: "{{ (task_definitions|default({})) | combine( { service: lookup('template', task_definition_path)} ) }}"
  loop: "{{ services }}"
  loop_control:
    loop_var: service

- set_fact:
    secrets: "{{ secrets_original }}"
  when: 
    - secrets_original is defined
    - friendly_secrets == true

- name: Generate task definition files
  copy:
    dest: "/tmp/task_definition_{{ task_definition.key }}.json"
    content: "{{ task_definition.value }}"
  loop: "{{ task_definitions | dict2items }}"
  loop_control:
    loop_var: task_definition
    index_var: task_definition_index
  register: generated_task_definitions
  no_log: "{{ ! debug }}"

- name: Publish task definition (assumed role)
  shell: "aws ecs register-task-definition --cli-input-json file://{{ task_definition_file.dest }} --output=text --query 'taskDefinition.taskDefinitionArn'"
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_acess_key }}"
    AWS_SESSION_TOKEN: "{{ aws_session_token }}"
  loop: "{{ generated_task_definitions.results }}"
  loop_control:
    loop_var: task_definition_file
  register: task_registration_assumed_role
  no_log: "{{ ! debug }}"
  when:
    - assumed_role is defined
    - assumed_role != ""
    - assumed_role != false

- name: Publish task definition
  shell: "aws ecs register-task-definition --cli-input-json file://{{ task_definition_file.dest }} --output=text --query 'taskDefinition.taskDefinitionArn'"
  loop: "{{ generated_task_definitions.results }}"
  loop_control:
    loop_var: task_definition_file
  register: task_registration
  no_log: "{{ ! debug }}"
  when:
    - not assumed_role

- debug:
    msg: "{{ item.task_definition_file.task_definition.value.family }} Published task definition arn: {{ item.stdout }} "
  loop: "{{ task_registration_assumed_role.results }}"
  when:
    - assumed_role is defined
    - assumed_role != ""
    - assumed_role != false

- debug:
    msg: "{{ item.task_definition_file.task_definition.value.family }} Published task definition arn: {{ item.stdout }} "
  loop: "{{ task_registration.results }}"
  when:
    - not assumed_role

- name: "Creating task definition artefact: {{ artefact_path }}/task-definition-arn-{{ item.task_definition_file.task_definition.value.family }}.txt"
  copy:
    dest: "{{ artefact_path }}/task-definition-arn-{{ item.task_definition_file.task_definition.value.family }}.txt"
    content: "{{ item.stdout }}"
  loop: "{{ task_registration_assumed_role.results }}"
  no_log: "{{ ! debug }}"
  when:
    - assumed_role is defined
    - assumed_role != ""
    - assumed_role != false

- name: "Creating task definition artefact: {{ artefact_path }}/task-definition-arn-{{ item.task_definition_file.task_definition.value.family }}.txt"
  copy:
    dest: "{{ artefact_path }}/task-definition-arn-{{ item.task_definition_file.task_definition.value.family }}.txt"
    content: "{{ item.stdout }}"
  loop: "{{ task_registration.results }}"
  no_log: "{{ ! debug }}"
  when:
    - not assumed_role
  